package lotto.domain;

import lotto.domain.strategy.RandomLottoNumberGenerateStrategy;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class LottoTicket {
    private static final int MIN_PURCHASE_AMOUNT = 1_000;
    private final List<LottoNumber> lottoNumbers;

    public LottoTicket(int autoGeneratedLottoCount, List<LottoNumber> lottoNumbersByManual, int purchaseAmount) {
        validatePurchaseAmount(autoGeneratedLottoCount, lottoNumbersByManual.size(), purchaseAmount);

        this.lottoNumbers = createLotto(autoGeneratedLottoCount, lottoNumbersByManual);
    }

    public List<LottoNumber> getLottoNumbers() {
        return lottoNumbers;
    }

    public LottoResult calculateResult(List<LottoAvailableNumber> winningNumbers, LottoAvailableNumber bonusNumber) {
        return new LottoResult(lottoNumbers, winningNumbers, bonusNumber);
    }

    public int getTotalTicketCount() {
        return lottoNumbers.size();
    }

    private void validatePurchaseAmount(int autoGeneratedLottoCount, int manualLottoCount, int purchaseAmount) {
        int totalTickets = manualLottoCount + (Math.max(autoGeneratedLottoCount, 0));
        if (purchaseAmount < MIN_PURCHASE_AMOUNT) {
            throw new IllegalArgumentException("로또 구매 금액은 최소 " + MIN_PURCHASE_AMOUNT + "원 이상이어야 합니다.");
        }

        if (totalTickets * MIN_PURCHASE_AMOUNT > purchaseAmount) {
            throw new IllegalArgumentException("로또 구매 금액이 부족합니다.");
        }
    }

    private List<LottoNumber> createLotto(int autoGeneratedLottoCount, List<LottoNumber> lottoNumbersByManual) {
        List<LottoNumber> autoGeneratedLottoNumbers = IntStream.range(0, autoGeneratedLottoCount)
                .mapToObj(i -> new LottoNumber(new RandomLottoNumberGenerateStrategy()))
                .collect(Collectors.toList());

        return Stream.concat(lottoNumbersByManual.stream(), autoGeneratedLottoNumbers.stream())
                .collect(Collectors.toList());
    }
}
