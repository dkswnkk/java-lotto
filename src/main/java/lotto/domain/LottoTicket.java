package lotto.domain;

import lotto.domain.strategy.RandomLottoNumberGenerateStrategy;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class LottoTicket {
    private final List<LottoNumber> lottoNumbers;

    public LottoTicket(int autoGeneratedLottoCount, List<LottoNumber> lottoNumbersByManual) {
        this.lottoNumbers = createLotto(autoGeneratedLottoCount, lottoNumbersByManual);
    }

    public List<LottoNumber> getLottoNumbers() {
        return lottoNumbers;
    }

    public LottoResult calculateResult(List<Integer> winningNumbers, int bonusNumber) {
        return new LottoResult(lottoNumbers, winningNumbers, bonusNumber);
    }

    public int getTotalTicketCount() {
        return lottoNumbers.size();
    }


    private List<LottoNumber> createLotto(int lottoCount, List<LottoNumber> lottoNumbersByManual) {
        int autoGeneratedLottoCount = lottoCount - lottoNumbersByManual.size();

        List<LottoNumber> autoGeneratedLottoNumbers = IntStream.range(0, autoGeneratedLottoCount)
                .mapToObj(i -> new LottoNumber(new RandomLottoNumberGenerateStrategy()))
                .collect(Collectors.toList());

        return Stream.concat(lottoNumbersByManual.stream(), autoGeneratedLottoNumbers.stream())
                .collect(Collectors.toList());
    }
}
